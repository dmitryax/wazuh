---
test_name: PUT /agents/:agent_id/group/:group_id

includes:
  - !include common.yaml

marks:
  - usefixtures:
      - agents_test

stages:
  - type: ref
    id: login_get_token
  - name: Create a group called dmz

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/dmz"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: !anystr

  - name: Add group to an agent

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/group/dmz"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: !anystr

  - name: Bad agent name

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/wrong_agent/group/dmz"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body: &error_spec
        detail: !anystr
        status: !anyint
        title: !anystr
        type: !anystr

  - name: Agent does not exist

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/group/dmz"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        code: 1701

  - name: Agent does not exist

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/group/wrong_group"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body: 
        code: 1710

  - name: Agent does not exist (invalid_param)

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/group/wrong_%_group"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body: 
        <<: *error_spec

  - name: Replace parameter

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/group/dmz?force_single_group=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: !anystr

    delay_after: 10

---
test_name: PUT /agents/:agent_id/restart

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Try restart agent 000 (manager)

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response: &error_restart_agent
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1702
                message: !anystr
                remediation: !anystr
              id: '000'
        message: Some agents were not restarted

  - name: Try restart not existing agent

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body: 
        code: 1701

  - name: Try restart agent with an invalid id

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/bad_id/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        <<: *error_spec

  - name: Restart an agent

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          affected_items: ["001"]
        message: All selected agents were restarted

---
test_name: PUT /agents/:agent_name

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Create new agent by name

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/test_agent"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        data:
          id: !anystr
          key: !anystr

  - name: Try create agent (invalid_character)

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/test_%_agent"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body: 
        <<: *error_spec

  - name: Try create exists agent

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/test_agent"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        code: 1705

---
test_name: PUT /agents/groups/:group_name

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Create a group called webserver

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/webserver"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: !anystr

  - name: Create a group called webserver that exist

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/webserver"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body: 
        code: 1711

  - name: Create a group called ;group (is not alphanumeric)

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/groups/;group"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body: 
        <<: *error_spec

---
test_name: PUT /agents/restart

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Restart all agents

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: !anystr

    delay_after: 30

---
test_name: PUT /agents/:agent_id/upgrade

marks:
  - usefixtures:
      - agents_test
  - skip

stages:
  - name: Upgrade not exists agent

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/upgrade?wait_for_complete=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        code: 1701

  - name: Upgrade agent 000 (manager)

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/upgrade?wait_for_complete=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        code: 1703

  - name: Upgrade agent by name

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/bad_id/upgrade?wait_for_complete=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        <<: *error_spec

  - name: Upgrade an agent

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/upgrade?wait_for_complete=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: !anystr

    delay_after: 30

  - name: Try to upgrade an agent that is updated to last version

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/upgrade?wait_for_complete=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        code: 1716

  - name: Upgrade to agent with other version (force param necesary)

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/upgrade?wait_for_complete=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        version: v3.8.1
        force: true

    response:
      status_code: 200
      body:
        message: !anystr 

  - name: Upgrade an agent with using http

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/002/upgrade?wait_for_complete=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        use_http: true

    response:
      status_code: 200
      body:
        message: !anystr

    delay_after: 30

  - name: Upgrade an agent with using wkp repo
    skip: True

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/002/upgrade?wait_for_complete=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params: 
        wpk_repo: wazuh_agent_v3.9.0_linux_x86_64.wpk

    response:
      status_code: 200
      body:
        message: !anystr

---
test_name: PUT /agents/:agent_id/upgrade_custom

marks:
  - usefixtures:
      - agents_test

stages:
  - name: Upgrade not exists agent

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/upgrade_custom?wait_for_complete=true&installer=agent_upgrade.py&file_path=/var/ossec"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        code: 1701

  - name: Upgrade agent 000 (manager)

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/upgrade_custom?wait_for_complete=true&installer=agent_upgrade.py&file_path=/var/ossec"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        code: 1703

  - name: Upgrade agent by name

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/bad_id/upgrade_custom?wait_for_complete=true&installer=agent_upgrade.py&file_path=/var/ossec"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 400
      body:
        <<: *error_spec

  - name: Upgrade custom an agent without parameters

    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/003/upgrade_custom?wait_for_complete=true"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 500

  - name: Upgrade custom an agent
    skip: True
    request:
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/upgrade_custom?wait_for_complete=true&installer=agent_upgrade.py&file_path=/var/ossec"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"

    response:
      status_code: 200
      body:
        message: !anystr
